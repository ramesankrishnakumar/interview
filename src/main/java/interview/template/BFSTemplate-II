
Sometimes, it is important to make sure that we never visit a node twice. 
Otherwise, we might get stuck in an infinite loop, e.g. in graph with cycle. 
If so, we can add a hash set to the code above to solve this problem. 
Here is the pseudocode after modification:


Time Complexity: O(V + E). Here, V represents the number of vertices, and E represents the number of edges. 
We need to check every vertex and traverse through every edge in the graph. 
The time complexity is the same as it was for the DFS approach.

Space Complexity: O(V). Generally, we will check if a vertex has been visited before adding it to the queue, 
so the queue will use at most O(V) space. Keeping track of which vertices have been visited will also require O(V) space.



/**
 * Return the length of the shortest path between root and target node.
 */
int BFS(Node root, Node target) {
    Queue<Node> queue;  // store all nodes which are waiting to be processed
    Set<Node> visited;  // store all the nodes that we've visited
    int step = 0;       // number of steps neeeded from root to current node
    // initialize
    add root to queue;
    add root to visited;
    // BFS
    while (queue is not empty) {
        // iterate the nodes which are already in the queue
        int size = queue.size();
        for (int i = 0; i < size; ++i) {
            Node cur = the first node in queue;
            return step if cur is target;
            for (Node next : the neighbors of cur) {
                if (next is not in visited) {
                    add next to queue;
                    add next to visited;
                }
            }
            remove the first node from queue;
        }
        step = step + 1;
    }
    return -1;          // there is no path from root to target
}

